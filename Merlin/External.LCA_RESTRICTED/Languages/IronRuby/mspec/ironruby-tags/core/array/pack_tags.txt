fails:Array#pack raises an ArgumentError with ('%')
fails:Array#pack raises an ArgumentError on empty array
fails:Array#pack sequentially processes each pack format, which consumes element in the array, and finally concatenates their result
fails:Array#pack just ignores unknown format
fails:Array#pack ignores white spaces
fails:Array#pack skips everything till the end of line (LF) string with ('#')
fails:Array#pack returns a tainted string when a pack argument is tainted
fails:Array#pack with format 'Z' returns the whole argument string with star parameter
fails:Array#pack with format 'Z' comsumres only one array item per a format
fails:Array#pack with format 'B' returns packed bit-string descending order
fails:Array#pack with format 'B' accepts characters other than 0 or 1 for compatibility to perl
fails:Array#pack with format 'B' conversion edge case: all zeros
fails:Array#pack with format 'B' conversion edge case: all ones
fails:Array#pack with format 'B' conversion edge case: left one
fails:Array#pack with format 'B' conversion edge case: right one
fails:Array#pack with format 'B' conversion edge case: edge sequences not in first char
fails:Array#pack with format 'B' uses zeros if count is not multiple of 8
fails:Array#pack with format 'B' returns zero-char for each 2 of count that greater than string length
fails:Array#pack with format 'B' returns extra zero char if count is odd and greater than string length
fails:Array#pack with format 'B' starts new char if string is ended before char's 8 bits
fails:Array#pack with format 'B' considers count = 1 if no explicit count it given
fails:Array#pack with format 'B' returns empty string if count = 0
fails:Array#pack with format 'B' uses argument string length as count if count = *
fails:Array#pack with format 'B' consumes only one array item per a format
fails:Array#pack with format 'B' raises a TypeError if corresponding array item is not String
fails:Array#pack with format 'b' returns packed bit-string descending order
fails:Array#pack with format 'b' conversion edge case: all zeros
fails:Array#pack with format 'b' conversion edge case: all ones
fails:Array#pack with format 'b' conversion edge case: left one
fails:Array#pack with format 'b' conversion edge case: right one
fails:Array#pack with format 'b' conversion edge case: edge sequences not in first char
fails:Array#pack with format 'b' accepts characters other than 0 or 1 for compatibility to perl
fails:Array#pack with format 'b' uses zeros if count is not multiple of 8
fails:Array#pack with format 'b' returns zero-char for each 2 of count that greater than string length
fails:Array#pack with format 'b' returns extra zero char if count is odd and greater than string length
fails:Array#pack with format 'b' starts new char if argument string is ended before char's 8 bits
fails:Array#pack with format 'b' considers count = 1 if no explicit count it given
fails:Array#pack with format 'b' returns empty string if count = 0
fails:Array#pack with format 'b' uses argument string length as count if count = *
fails:Array#pack with format 'b' consumes only one array item per a format
fails:Array#pack with format 'b' raises a TypeError if corresponding array item is not String
fails:Array#pack with format 'H' consumes only one array item per a format
fails:Array#pack with format 'h' consumes only one array item per a format
fails:Array#pack with format 'C' raises an ArgumentError if count is greater than array elements left
fails:Array#pack with format 'C' raises ArgumentError when tails suffix '!'
fails:Array#pack with format 'c' raises an ArgumentError if count is greater than array elements left
fails:Array#pack with format 'c' raises ArgumentError when tails suffix '!'
fails:Array#pack with format 'n' may raise a RangeError when a pack argument is <= -2**32
fails:Array#pack with format 'n' raises an ArgumentError if count is greater than array elements left
fails:Array#pack with format 'n' raises ArgumentError when tails suffix '!'
fails:Array#pack with format 'v' may raise a RangeError when a pack argument is <= -2**32
fails:Array#pack with format 'v' raises an ArgumentError if count is greater than array elements left
fails:Array#pack with format 'v' raises ArgumentError when tails suffix '!'
fails:Array#pack with format 'N' raises a RangeError when a pack argument is <= -2**32
fails:Array#pack with format 'N' raises an ArgumentError if count is greater than array elements left
fails:Array#pack with format 'N' raises ArgumentError when tails suffix '!'
fails:Array#pack with format 'V' raises a RangeError when a pack argument is <= -2**32
fails:Array#pack with format 'V' raises an ArgumentError if count is greater than array elements left
fails:Array#pack with format 'V' raises ArgumentError when tails suffix '!'
fails:Array#pack with format 's' may raise a RangeError when a pack argument is <= -2**32
fails:Array#pack with format 's' raises an ArgumentError if count is greater than array elements left
fails:Array#pack with format 'S' may raise a RangeError when a pack argument is <= -2**32
fails:Array#pack with format 'S' raises an ArgumentError if count is greater than array elements left
fails:Array#pack with format 'l' raises a RangeError when a pack argument is <= -2**32
fails:Array#pack with format 'l' raises an ArgumentError if count is greater than array elements left
fails:Array#pack with format 'L' raises a RangeError when a pack argument is <= -2**32
fails:Array#pack with format 'L' raises an ArgumentError if count is greater than array elements left
fails:Array#pack with format 'q' regards negative values as 2's complement in order to converts it to positive
fails:Array#pack with format 'q' raises a RangeError when a pack argument is <= -2**64
fails:Array#pack with format 'q' raises an ArgumentError if count is greater than array elements left
fails:Array#pack with format 'Q' regards negative values as 2's complement in order to converts it to positive
fails:Array#pack with format 'Q' raises a RangeError when a pack argument is <= -2**64
fails:Array#pack with format 'Q' raises an ArgumentError if count is greater than array elements left
fails:Array#pack with format 's!' may raise a RangeError when a pack argument is <= -2**32
fails:Array#pack with format 's!' processes count number of array elements if count given
fails:Array#pack with format 's!' returns empty string if count = 0
fails:Array#pack with format 's!' with star parameter processes all remaining array items
fails:Array#pack with format 's!' raises an ArgumentError if count is greater than array elements left
fails:Array#pack with format 's_' may raise a RangeError when a pack argument is <= -2**32
fails:Array#pack with format 's_' raises an ArgumentError if count is greater than array elements left
fails:Array#pack with format 'S!' may raise a RangeError when a pack argument is <= -2**32
fails:Array#pack with format 'S!' raises an ArgumentError if count is greater than array elements left
fails:Array#pack with format 'S_' may raise a RangeError when a pack argument is <= -2**32
fails:Array#pack with format 'S_' raises an ArgumentError if count is greater than array elements left
fails:Array#pack with format 'i' raises a RangeError when a pack argument is <= -2**32
fails:Array#pack with format 'i' raises an ArgumentError if count is greater than array elements left
fails:Array#pack with format 'i!' raises a RangeError when a pack argument is <= -2**32
fails:Array#pack with format 'i!' processes count number of array elements if count given
fails:Array#pack with format 'i!' returns empty string if count = 0
fails:Array#pack with format 'i!' with star parameter processes all remaining array items
fails:Array#pack with format 'i!' raises an ArgumentError if count is greater than array elements left
fails:Array#pack with format 'i_' raises a RangeError when a pack argument is <= -2**32
fails:Array#pack with format 'i_' raises an ArgumentError if count is greater than array elements left
fails:Array#pack with format 'I' raises a RangeError when a pack argument is <= -2**32
fails:Array#pack with format 'I' raises an ArgumentError if count is greater than array elements left
fails:Array#pack with format 'I!' raises a RangeError when a pack argument is <= -2**32
fails:Array#pack with format 'I!' processes count number of array elements if count given
fails:Array#pack with format 'I!' returns empty string if count = 0
fails:Array#pack with format 'I!' with star parameter processes all remaining array items
fails:Array#pack with format 'I!' raises an ArgumentError if count is greater than array elements left
fails:Array#pack with format 'I_' raises a RangeError when a pack argument is <= -2**32
fails:Array#pack with format 'I_' raises an ArgumentError if count is greater than array elements left
fails:Array#pack with format 'l!' raises a RangeError when a pack argument is <= -2**32
fails:Array#pack with format 'l!' processes count number of array elements if count given
fails:Array#pack with format 'l!' returns empty string if count = 0
fails:Array#pack with format 'l!' with star parameter processes all remaining array items
fails:Array#pack with format 'l!' raises an ArgumentError if count is greater than array elements left
fails:Array#pack with format 'l_' returns a string containing 4 bytes for an integer
fails:Array#pack with format 'l_' raises a RangeError when a pack argument is >= 2**32
fails:Array#pack with format 'l_' raises a RangeError when a pack argument is <= -2**32
fails:Array#pack with format 'l_' regards negative values as 2's complement in order to converts it to positive
fails:Array#pack with format 'l_' tries to convert the pack argument to an Integer using #to_int
fails:Array#pack with format 'l_' processes count number of array elements if count given
fails:Array#pack with format 'l_' with star parameter processes all remaining array items
fails:Array#pack with format 'l_' raises an ArgumentError if count is greater than array elements left
fails:Array#pack with format 'L!' raises a RangeError when a pack argument is <= -2**32
fails:Array#pack with format 'L!' processes count number of array elements if count given
fails:Array#pack with format 'L!' returns empty string if count = 0
fails:Array#pack with format 'L!' with star parameter processes all remaining array items
fails:Array#pack with format 'L!' raises an ArgumentError if count is greater than array elements left
fails:Array#pack with format 'L_' returns a string containing 4 bytes for an integer
fails:Array#pack with format 'L_' raises a RangeError when a pack argument is >= 2**32
fails:Array#pack with format 'L_' raises a RangeError when a pack argument is <= -2**32
fails:Array#pack with format 'L_' regards negative values as 2's complement in order to converts it to positive
fails:Array#pack with format 'L_' tries to convert the pack argument to an Integer using #to_int
fails:Array#pack with format 'L_' processes count number of array elements if count given
fails:Array#pack with format 'L_' with star parameter processes all remaining array items
fails:Array#pack with format 'L_' raises an ArgumentError if count is greater than array elements left
fails:Array#pack with format 'f' consumes as many Floats as specified
fails:Array#pack with format 'f' tries to convert the pack argument to a Float using #to_f
fails:Array#pack with format 'f' does not raise an error even if passed a integer which is too large to cast into float value
fails:Array#pack with format 'f' raises a TypeError if corresponding array item is not Float
fails:Array#pack with format 'f' returns a string with length 4
fails:Array#pack with format 'f' accepts the positive zero
fails:Array#pack with format 'f' accepts the negative zero
fails:Array#pack with format 'f' accepts a positive value
fails:Array#pack with format 'f' accepts a negative value
fails:Array#pack with format 'f' accepts the positive infinity
fails:Array#pack with format 'f' accepts the negative infinity
fails:Array#pack with format 'f' accepts a NaN
fails:Array#pack with format 'd' consumes as many Floats as specified
fails:Array#pack with format 'd' tries to convert the pack argument to a Float using #to_f
fails:Array#pack with format 'd' does not raise an error even if passed a integer which is too large to cast into float value
fails:Array#pack with format 'd' raises a TypeError if corresponding array item is not Float
fails:Array#pack with format 'd' returns a string with length 8
fails:Array#pack with format 'd' accepts the positive zero
fails:Array#pack with format 'd' accepts the negative zero
fails:Array#pack with format 'd' accepts a positive value
fails:Array#pack with format 'd' accepts a negative value
fails:Array#pack with format 'd' accepts the positive infinity
fails:Array#pack with format 'd' accepts the negative infinity
fails:Array#pack with format 'd' accepts a NaN
fails:Array#pack with format 'e' consumes as many Floats as specified
fails:Array#pack with format 'e' tries to convert the pack argument to a Float using #to_f
fails:Array#pack with format 'e' does not raise an error even if passed a integer which is too large to cast into float value
fails:Array#pack with format 'e' raises a TypeError if corresponding array item is not Float
fails:Array#pack with format 'e' returns a string with length 4
fails:Array#pack with format 'e' accepts the positive zero
fails:Array#pack with format 'e' accepts the negative zero
fails:Array#pack with format 'e' accepts a positive value
fails:Array#pack with format 'e' accepts a negative value
fails:Array#pack with format 'e' accepts the positive infinity
fails:Array#pack with format 'e' accepts the negative infinity
fails:Array#pack with format 'e' accepts a NaN
fails:Array#pack with format 'E' consumes as many Floats as specified
fails:Array#pack with format 'E' tries to convert the pack argument to a Float using #to_f
fails:Array#pack with format 'E' does not raise an error even if passed a integer which is too large to cast into float value
fails:Array#pack with format 'E' raises a TypeError if corresponding array item is not Float
fails:Array#pack with format 'E' returns a string with length 8
fails:Array#pack with format 'E' accepts the positive zero
fails:Array#pack with format 'E' accepts the negative zero
fails:Array#pack with format 'E' accepts a positive value
fails:Array#pack with format 'E' accepts a negative value
fails:Array#pack with format 'E' accepts the positive infinity
fails:Array#pack with format 'E' accepts the negative infinity
fails:Array#pack with format 'E' accepts a NaN
fails:Array#pack with format 'g' consumes as many Floats as specified
fails:Array#pack with format 'g' tries to convert the pack argument to a Float using #to_f
fails:Array#pack with format 'g' does not raise an error even if passed a integer which is too large to cast into float value
fails:Array#pack with format 'g' raises a TypeError if corresponding array item is not Float
fails:Array#pack with format 'g' returns a string with length 4
fails:Array#pack with format 'g' accepts the positive zero
fails:Array#pack with format 'g' accepts the negative zero
fails:Array#pack with format 'g' accepts a positive value
fails:Array#pack with format 'g' accepts a negative value
fails:Array#pack with format 'g' accepts the positive infinity
fails:Array#pack with format 'g' accepts the negative infinity
fails:Array#pack with format 'g' accepts a NaN
fails:Array#pack with format 'g' keeps order of nonnegative real numbers
fails:Array#pack with format 'g' reverses order of nonpositive real numbers
fails:Array#pack with format 'G' consumes as many Floats as specified
fails:Array#pack with format 'G' tries to convert the pack argument to a Float using #to_f
fails:Array#pack with format 'G' does not raise an error even if passed a integer which is too large to cast into float value
fails:Array#pack with format 'G' raises a TypeError if corresponding array item is not Float
fails:Array#pack with format 'G' returns a string with length 8
fails:Array#pack with format 'G' accepts the positive zero
fails:Array#pack with format 'G' accepts the negative zero
fails:Array#pack with format 'G' accepts a positive value
fails:Array#pack with format 'G' accepts a negative value
fails:Array#pack with format 'G' accepts the positive infinity
fails:Array#pack with format 'G' accepts the negative infinity
fails:Array#pack with format 'G' accepts a NaN
fails:Array#pack with format 'G' keeps order of nonnegative real numbers
fails:Array#pack with format 'G' reverses order of nonpositive real numbers
fails:Array#pack with format 'M' encodes string with Quoted Printable encoding
fails:Array#pack with format 'M' doesn't encode new line chars
fails:Array#pack with format 'M' always appends soft line break at the end of encoded string
fails:Array#pack with format 'M' appends soft line break after each 72 chars + 1 encoded char in encoded string by default
fails:Array#pack with format 'M' appends soft line break after each specified number of chars + 1 encoded char in encoded string for the specified number > 1
fails:Array#pack with format 'M' appends soft line break after each 72 chars + 1 encoded char in encoded string for the specified count is 1
fails:Array#pack with format 'M' appends soft line break after each 72 chars + 1 encoded char in encoded string for the specified count is 0
fails:Array#pack with format 'M' doesn't quote chars 32..60 and 62..126
fails:Array#pack with format 'M' quotes chars by adding equal sign and char's hex value
fails:Array#pack with format 'M' quotes equal sign
fails:Array#pack with format 'M' doesn't quote \t char
fails:Array#pack with format 'M' returns empty string if source string is empty
fails:Array#pack with format 'M' calls #to_s on object to convert to string
fails:Array#pack with format 'M' does not check whether the pack argument responds to #to_s before call #to_s
fails:Array#pack with format 'M' comsumres only one array item per a format
fails:Array#pack with format 'M' ignores star parameter
fails:Array#pack with format 'M' properly handles recursive arrays
fails:Array#pack with format 'm' appends newline whenever after consumes [number/3]*3 of bytes for the specified number > 2, where [x] is the floor function
fails:Array#pack with format 'U' regards a integer as a Unicode codepoint and encodes into UTF-8 byte sequence
fails:Array#pack with format 'U' raises an ArgumentError if count is greater than array elements left
fails:Array#pack with format 'U' raises RangeError when a pack argument is negative
fails:Array#pack with format 'u' encodes string with UU-encoding
fails:Array#pack with format 'u' converts series of 3-char sequences into four 4-char sequences
fails:Array#pack with format 'u' appends zero-chars to source string if string length is not multiple of 3
fails:Array#pack with format 'u' appends newline at the end of result string
fails:Array#pack with format 'u' appends newline whenever after consumes 45 bytes by default
fails:Array#pack with format 'u' prepends encoded line length to each line with ('u')
fails:Array#pack with format 'u' appends newline whenever after consumes [number/3]*3 of bytes for the specified number > 2, where [x] is the floor function
fails:Array#pack with format 'u' ignores line length parameter if it is < 3
fails:Array#pack with format 'u' comsumres only one array item per a format
fails:Array#pack with format 'u' ignores star parameter
fails:Array#pack with format 'u' encodes 6-bit char with another char starting from char 32 with ('u')
fails:Array#pack with format 'u' replaces spaces in encoded string with grave accent (`) char with ('u')
fails:Array#pack with format 'u' returns empty string if source string is empty with ('u')
fails:Array#pack with format 'u' tries to convert the pack argument to a String using #to_str
fails:Array#pack with format 'u' raises a TypeError if corresponding array item is not string
fails:Array#pack with format 'w' converts to BER-compressed integer
fails:Array#pack with format 'w' calls to_int on non-integer values before packing
fails:Array#pack with format 'w' raises TypeError on nil and non-numeric arguments
fails:Array#pack with format 'X' decreases result string by one byte
fails:Array#pack with format 'X' with count decreases result string by count bytes
fails:Array#pack with format 'X' raises an ArgumentError if count greater than already generated string length
fails:Array#pack with '@' moves the end of result string into the specified position by offset from head
fails:Array#pack with '@' fills blank with NUL bytes if the position exceeds the end of string
fails:Array#pack with '@' concatenates successing formats at the position '@' moves it into
fails:Array#pack with '@' does not recover lost bytes when shorten the string and then extends it again
fails:Array#pack with '@' is able to work with 'X'
fails:String#unpack with 'w' directive produces a BER-compressed integer
